<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kaku's Blog]]></title>
  <link href="http://kaku87.github.com/atom.xml" rel="self"/>
  <link href="http://kaku87.github.com/"/>
  <updated>2015-02-01T14:24:38+09:00</updated>
  <id>http://kaku87.github.com/</id>
  <author>
    <name><![CDATA[kaku]]></name>
    <email><![CDATA[ghjcumt2008@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[zsh下git命令Cheat-sheet]]></title>
    <link href="http://kaku87.github.com/blog/2015/02/01/git-commond/"/>
    <updated>2015-02-01T14:20:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2015/02/01/git-commond</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g - git
</span><span class='line'>gst - git status
</span><span class='line'>gl - git pull
</span><span class='line'>gup - git pull --rebase
</span><span class='line'>gp - git push
</span><span class='line'>gd - git diff
</span><span class='line'>gdc - git diff --cached
</span><span class='line'>gdv - git diff -w "$@" | view -
</span><span class='line'>gc - git commit -v
</span><span class='line'>gc! - git commit -v --amend
</span><span class='line'>gca - git commit -v -a
</span><span class='line'>gca! - git commit -v -a --amend
</span><span class='line'>gcmsg - git commit -m
</span><span class='line'>gco - git checkout
</span><span class='line'>gcm - git checkout master
</span><span class='line'>gr - git remote
</span><span class='line'>grv - git remote -v
</span><span class='line'>grmv - git remote rename
</span><span class='line'>grrm - git remote remove
</span><span class='line'>gsetr - git remote set-url
</span><span class='line'>grup - git remote update
</span><span class='line'>grbi - git rebase -i
</span><span class='line'>grbc - git rebase --continue
</span><span class='line'>grba - git rebase --abort
</span><span class='line'>gb - git branch
</span><span class='line'>gba - git branch -a
</span><span class='line'>gcount - git shortlog -sn
</span><span class='line'>gcl - git config --list
</span><span class='line'>gcp - git cherry-pick
</span><span class='line'>glg - git log --stat --max-count=10
</span><span class='line'>glgg - git log --graph --max-count=10
</span><span class='line'>glgga - git log --graph --decorate --all
</span><span class='line'>glo - git log --oneline --decorate --color
</span><span class='line'>glog - git log --oneline --decorate --color --graph
</span><span class='line'>gss - git status -s
</span><span class='line'>ga - git add
</span><span class='line'>gm - git merge
</span><span class='line'>grh - git reset HEAD
</span><span class='line'>grhh - git reset HEAD --hard
</span><span class='line'>gclean - git reset --hard && git clean -dfx
</span><span class='line'>gwc - git whatchanged -p --abbrev-commit --pretty=medium
</span><span class='line'>gsts - git stash show --text
</span><span class='line'>gsta - git stash
</span><span class='line'>gstp - git stash pop
</span><span class='line'>gstd - git stash drop
</span><span class='line'>ggpull - git pull origin $(current_branch)
</span><span class='line'>ggpur - git pull --rebase origin $(current_branch)
</span><span class='line'>ggpush - git push origin $(current_branch)
</span><span class='line'>ggpnp - git pull origin $(current_branch) && git push origin $(current_branch)
</span><span class='line'>glp - _git_log_prettily</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Gem系列之devise]]></title>
    <link href="http://kaku87.github.com/blog/2015/01/26/devise/"/>
    <updated>2015-01-26T22:48:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2015/01/26/devise</id>
    <content type="html"><![CDATA[<h1>Devise</h1>

<h2>概要</h2>

<p>最有人气的登陆验证gem。ORM支持ActiveRecord和Mongodb。</p>

<h2>基本使用方法</h2>

<p>创建project</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new blog
</span><span class='line'>cd blog
</span></code></pre></td></tr></table></div></figure>


<p>Gemfile中加入devise gem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Gemfile
</span><span class='line'>gem 'devise'
</span></code></pre></td></tr></table></div></figure>


<p>运行bundle install</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>安装devise</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g devise:install</span></code></pre></td></tr></table></div></figure>


<p>指定发送邮件时的host名</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#config/environments/development.rb
</span><span class='line'>Rails.application.configure do
</span><span class='line'>  ...
</span><span class='line'>  # deviseの設定
</span><span class='line'>  config.action_mailer.default_url_options = { host: 'localhost:3000' }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>指定root_url</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config/routes.rb
</span><span class='line'>  root to: "home#index"
</span><span class='line'>  ... </span></code></pre></td></tr></table></div></figure>


<p>加入错误消息显示部分代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># app/views/layouts/application.html.erb
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;p class="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;
</span><span class='line'>&lt;p class="alert"&gt;&lt;%= alert %&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;%= yield %&gt;
</span><span class='line'>
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p>生成devise model</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g devise user</span></code></pre></td></tr></table></div></figure>


<p>执行migrate</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>添加登陆，退出，注册，设置链接</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># app/views/layouts/application.html.erb
</span><span class='line'>...
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;header&gt;
</span><span class='line'>  &lt;nav&gt;
</span><span class='line'>    &lt;!-- user_signed_in? devise的Helper方法，验证是否已登陆 --&gt;
</span><span class='line'>    &lt;% if user_signed_in? %&gt; 
</span><span class='line'>      &lt;!-- current_user 当前登陆User对象 --&gt;
</span><span class='line'>      &lt;!-- *_path devise自动生成的路由，执行rake routes可以确认 --&gt;
</span><span class='line'>      Logged in as &lt;strong&gt;&lt;%= current_user.email %&gt;&lt;/strong&gt;.
</span><span class='line'>      &lt;%= link_to '设置', edit_user_registration_path %&gt; |
</span><span class='line'>      &lt;%= link_to "退出", destroy_user_session_path, method: :delete %&gt;
</span><span class='line'>    &lt;% else %&gt;
</span><span class='line'>      &lt;%= link_to "注册", new_user_registration_path %&gt; |
</span><span class='line'>      &lt;%= link_to "登陆", new_user_session_path %&gt;
</span><span class='line'>    &lt;% end %&gt;
</span><span class='line'>  &lt;/nav&gt;
</span><span class='line'>&lt;/header&gt;
</span><span class='line'>
</span><span class='line'>&lt;p class="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;
</span><span class='line'>&lt;p class="alert"&gt;&lt;%= alert %&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;%= yield %&gt;
</span><span class='line'>
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>启动服务，就可以看到画面啦。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails s</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp入门]]></title>
    <link href="http://kaku87.github.com/blog/2015/01/11/about-gulp/"/>
    <updated>2015-01-11T01:05:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2015/01/11/about-gulp</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>前端任务自动化工具</p>

<h2>官方网站</h2>

<p><a href="gulpjs.com">gulpjs.com</a></p>

<h2>相关知识</h2>

<p>GoogleのWenStarterKit是用gulp来做的。</p>

<h2>环境</h2>

<p>vagrant centos</p>

<h2>安装</h2>

<pre><code>1. sudo yum -y install epel-release

2. sodu yum -y install nodejs npm

    `node -v`确认node的版本号

    `npm -v`确认npm的版本号

3. sudo npm install gulp -g

    `gulp -v`确认gulp的版本号
</code></pre>

<h2>gulp和grunt的区别</h2>

<table>
<thead>
<tr>
<th>gulp         </th>
<th> grunt </th>
</tr>
</thead>
<tbody>
<tr>
<td> 插件少       </td>
<td>  插件多</td>
</tr>
<tr>
<td>8,398sta     </td>
<td>  8,439starM</td>
</tr>
<tr>
<td>2013/6/30    </td>
<td>  2011/9/18</td>
</tr>
<tr>
<td>gulpfie.js   </td>
<td>  Gruntfile.js</td>
</tr>
<tr>
<td>类似Node       </td>
<td>类似JavaScript</td>
</tr>
<tr>
<td>Node的插件    </td>
<td>  Grunt的插件</td>
</tr>
</tbody>
</table>


<h2>和Grunt相比较的优点</h2>

<p>1.配置文件比Grunt要少</p>

<p>2.比Grunt要快</p>

<h2>和Grunt相比的缺点</h2>

<p>1.写法和Node接近，所以相对比较复杂</p>

<p>2.文档较少</p>

<h2>创建package.json</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir mysite
</span><span class='line'>cd mysite 
</span><span class='line'>npm init
</span><span class='line'>npm install --save-dev gulp
</span><span class='line'>npm -i -D gulp
</span><span class='line'>rm -rf node_modules
</span><span class='line'>npm install</span></code></pre></td></tr></table></div></figure>


<h2>初识gulp.task()</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var gulp = require('gulp');
</span><span class='line'>  gulp.task('hello', function(){
</span><span class='line'>      console.log('hello world!')
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>gulp.task('default', ['hello']);</span></code></pre></td></tr></table></div></figure>


<h2>文件拷贝</h2>

<p>把当前目录里的package.json文件拷贝到当前目录中的dist文件夹中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var gulp = require('gulp');
</span><span class='line'>
</span><span class='line'>gulp.task('copy', function() {
</span><span class='line'>    gulp.src('./package.json')
</span><span class='line'>      .pipe(gulp.dest('./dist'));
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>gulp.task('default',['copy']);</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>gulp的常用5种API</h2>

<ol>
<li>定义task</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gulp.task('name',['tasks'], function() {
</span><span class='line'>    // content
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
2. 输入路径指定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gulp.src('files')
</span><span class='line'>  .pipe(name(''))</span></code></pre></td></tr></table></div></figure>


<p>
3. 执行task</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gulp.task('foo', function() {
</span><span class='line'>    gulp.run('bar');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
4. 输出路径指定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.pipe(gulp.dest('folder'));</span></code></pre></td></tr></table></div></figure>


<p> <br/>
5. 监视文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gulp.watch('files', function (event) {
</span><span class='line'>  console.log('js file changed!!');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
详细API信息请参照这里   <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md">github API</a></p>

<h2>gulp task执行顺序</h2>

<p>gulp的task默认为并行触发，若要顺序执行，要做如下处理。</p>

<ol>
<li>前面的task要写return</li>
<li>后面的task要加第二参数，值为前面的task</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var gulp = require('gulp');
</span><span class='line'>
</span><span class='line'>gulp.task('first', function() {
</span><span class='line'>    return gulp.src('./package.json')
</span><span class='line'>      .pipe(gulp.dest('./dist'));
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>gulp.task('second',['first'], function() {
</span><span class='line'>    console.log('first task done!!');
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>gulp.task('default',['second']);</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails3.0でモデルのER図を簡単に出力する方法]]></title>
    <link href="http://kaku87.github.com/blog/2013/05/10/20130515/"/>
    <updated>2013-05-10T09:38:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2013/05/10/20130515</id>
    <content type="html"><![CDATA[<pre><code>* graphvizをインストール
* Gemfileのdevelopment環境の設定に「gem "rails-erd"」を追加
* 「rake erd」を実行
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于rails控制器的功能测试]]></title>
    <link href="http://kaku87.github.com/blog/2013/03/15/about-rails-functional-test/"/>
    <updated>2013-03-15T15:16:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2013/03/15/about-rails-functional-test</id>
    <content type="html"><![CDATA[<h1>控制器的功能测试</h1>

<pre><code> require File.dirname(__FILE__) + '/../test_helper'
</code></pre>

<p>关键在于setup方法，有三个东西</p>

<pre><code>1.controller
2.request
3.response
</code></pre>

<p>get()方法时由测试辅助类提供的，它会模拟controller的web请求，并获取控制器的响应，
然后用assert_response来检查是否应答正确</p>

<p>-n可以指定运行某一个特定的测试方法</p>

<pre><code> ruby test/functional/logni_controller_test.rb -n test_index
</code></pre>

<p>assert_redirected_to :action=>&#8221;login&#8221;</p>

<h1>Dynamic Fixtures</h1>

<p>在夹具中也可以使用ruby代码动态加入</p>

<p>assert_template &#8220;index&#8221; 对模版进行断言</p>

<h1>测试登录</h1>

<pre><code>def test_login
  dave = users(:dave)
  post :login, :nmae=&gt;dave.name, :password=&gt;'secret'
  assert_redirected_to :action=&gt;"index"
  assert_equal dave.id, session[:user_id]
end
</code></pre>

<h1>HTTP请求方法</h1>

<p>get()  对指定的action执行一次HTTP GET请求，并将结果放入HTTP RESPONSE</p>

<pre><code>例: get(action,parameteres=nil,session=nil,flash=nil)
</code></pre>

<p>post() 提交表单</p>

<pre><code>例: post :edit, :user =&gt; {:name =&gt; "dave", :age =&gt; "24"}

 模拟XMLHttp请求
 xhr(method,action,parameters,session,flash)
</code></pre>

<p>put(),delete(),head()</p>

<h1>功能测试的断言</h1>

<pre><code> assert_dom_equal(expected_html,actual_html,message)
 例:assert_dom_equal(expected,@response.body)

 assert_response(type,message)
 type的种类
 1.:success
 2.:redirect
 3.:missing
 4.:error
 例:assert_response :success
</code></pre>

<h1>变量</h1>

<pre><code> assigns(key=nil)
      assert_not_nil assigns["items"]
 session
      assert_equal 2, session[:cart].items.size
 flash
      assert_equal "Danger!", flash[:notice]
 cookies
      assert_equal "Danger!", cookies[:name]
 redirect_to_url
      assert_equal "http://test.host/login", redirect_to_url
</code></pre>

<h1>辅助方法</h1>

<pre><code> find_tag(conditions)
 find_all_tag(conditions)
 follow_redirect
 fixture_file_upload(path,mime_type)
</code></pre>

<h1>测试response的content</h1>

<p>   使用强大的assert_select</p>

<pre><code> assert_select "title",  "TEST"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对于vim命令的一些总结]]></title>
    <link href="http://kaku87.github.com/blog/2013/03/05/about-vim/"/>
    <updated>2013-03-05T12:00:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2013/03/05/about-vim</id>
    <content type="html"><![CDATA[<h1>宏命令(Macros)</h1>

<p>高级一些的编辑器，都会包含宏功能，vim当然不能缺少了，在vim中使用宏是非常方便的：</p>

<pre><code>:qx 开始记录宏，并将结果存入寄存器x

q   退出记录模式

@x  播放记录在x寄存器中的宏命令
</code></pre>

<p>稍微解释一下，当在normal模式下输入:qx后，你对文本的所有编辑动作将会被记录下来，再次输入q即退出了记录模式，然后输入@x对刚才记录 下来的命令进行重复，此命令后可跟数字，表示要重复多少次，比如@x20，可以重复20次。这个在文本的批处理中是非常有用的。</p>

<h1>同时编辑多个文件</h1>

<p>在vim众多的插件中，有一个叫minibuffer的插件，就是下面所说的标签页功能了，可以支持同时编辑多个文件。</p>

<h1>标签命令</h1>

<pre><code>:tabe fn    在一个新的标签页中编辑文件fn

gt  切换到下一个标签页

gT  切换到上一个标签页

:tabr   切换到第一个标签页

:tabl   切换到最后一个标签页

:tabm [N]   把当前tab移动到第N个tab之后
</code></pre>

<p>对，正如你所想象的那样，跟eclipse, ue等的标签页是一个意思！</p>

<h1>窗口命令</h1>

<pre><code>ctrl+w s    水平分割窗口

ctrl+w w    切换窗口

ctrl+w q    退出当前窗口(由于同时有多个文件，此命令不会影响其他窗口)

ctrl+w v    垂直分割窗口
</code></pre>

<p>其他</p>

<p>vim在保存之前不会对文件做实际的修改，只是加载到缓冲区中，对文件的编辑其实是对缓冲区的编辑，直到:w时才会存入物理文件。</p>

<pre><code>:e file 把file加载到新的缓冲区中

:bn 跳转到下一个缓冲区

:bd 删除缓冲区(关闭文件)

:sp fn  分割窗口，并将fn加载到新的窗口中
</code></pre>

<h1>退出编辑器</h1>

<pre><code>:w  将缓冲区写入文件，即保存修改

:wq 保存修改并退出

:x  保存修改并退出

:q  退出，如果对缓冲区进行过修改，则会提示

:q! 强制退出，放弃修改
</code></pre>

<h1>查找替换</h1>

<pre><code>/pattern    向后搜索字符串pattern

?pattern    向前搜索字符串pattern

n   下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)

N   上一个匹配(同上)

:%s/old/new/g   搜索整个文件，将所有的old替换为new

:%s/old/new/gc  搜索整个文件，将所有的old替换为new，每次都要你确认是否替换

复制粘贴

dd  删除光标所在行

dw  删除一个字(word)

x   删除当前字符

X   删除前一个字符

D   删除到行末

yy  复制一行，此命令前可跟数字，标识复制多行，如6yy，表示从当前行开始复制6行

yw  复制一个字

y$  复制到行末

p   粘贴粘贴板的内容到当前行的下面

P   粘贴粘贴板的内容到当前行的上面

]p  有缩进的粘贴，vim会自动调节代码的缩进

"a  将内容放入/存入a寄存器，可以支持多粘贴板
</code></pre>

<p>附：比如常用的一个寄存器就是系统寄存器，名称为+，所以从系统粘贴板粘贴到vim中的命令为&#8221;+p,注意此处的+不表示操作符，二十一个寄存器。</p>

<h1>移动光标</h1>

<p>在vim中移动光标跟其他的编辑器中有很大的区别，不过一旦学会了，就会飞速的在文本中移动了。</p>

<pre><code>h,j,k,l 上，下，左，右

ctrl-f  上翻一页

ctrl-b  下翻一页

%   跳到与当前括号匹配的括号处，如当前在{，则跳转到与之匹配的}处

w   跳到下一个字首，按标点或单词分割

W   跳到下一个字首，长跳，如end-of-line被认为是一个字

e   跳到下一个字尾

E   跳到下一个字尾，长跳

b   跳到上一个字

B   跳到上一个字，长跳

0   跳至行首，不管有无缩进，就是跳到第0个字符

^   跳至行首的第一个字符

$   跳至行尾

gg  跳至文件的第一行

gd  跳至当前光标所在的变量的声明处

[N]G    跳到第N行，如0G，就等价于gg，100G就是第100行

fx  在当前行中找x字符，找到了就跳转至

;   重复上一个f命令，而不用重复的输入fx

tx  与fx类似，但是只是跳转到x的前一个字符处

Fx  跟fx的方向相反

),( 跳转到上/下一个语句

*   查找光标所在处的单词，向下查找

#   查找光标所在处的单词，向上查找

`.  跳转至上次编辑位置
</code></pre>

<h1>在屏幕上移动</h1>

<pre><code>H   移动光标到当前屏幕上最上边的一行

M   移动光标到当前屏幕上中间的一行

L   移动光标到当前屏幕上最下边的一行
</code></pre>

<h1>书签</h1>

<p>ma  把当前位置存成标签a</p>

<p>`a  跳转到标签a处</p>

<p> 编辑</p>

<pre><code>r   替换一个字符

J   将下一行和当前行连接为一行

cc  删除当前行并进入编辑模式

cw  删除当前字，并进入编辑模式

c$  擦除从当前位置至行末的内容，并进入编辑模式

s   删除当前字符并进入编辑模式

S   删除光标所在行并进入编辑模式

xp  交换当前字符和下一个字符

u   撤销

ctrl+r  重做

.   重复上一个编辑命令

~   切换大小写，当前字符

g~iw    切换当前字的大小写

gUiw    将当前字变成大写

guiw    将当前字变成小写

&gt;&gt;  将当前行右移一个单位

&lt;&lt;  将当前行左移一个单位(一个tab符)

==  自动缩进当前行
</code></pre>

<h1>插入模式</h1>

<pre><code>i   从当前光标处进入插入模式

I   进入插入模式，并置光标于行首

a   追加模式，置光标于当前光标之后

A   追加模式，置光标于行末

o   在当前行之下新加一行，并进入插入模式

O   在当前行之上新加一行，并进入插入模式
</code></pre>

<p>Esc 退出插入模式</p>

<h1>可视模式</h1>

<p>标记文本</p>

<pre><code>v   进入可视模式，单字符模式

V   进入可视模式，行模式

ctrl+v  进入可视模式，列模式，类似于UE的列模式

o   跳转光标到选中块的另一个端点

U   将选中块中的内容转成大写

O   跳转光标到块的另一个端点

aw  选中一个字

ab  选中括号中的所有内容，包括括号本身

aB  选中{}括号中的所有内容

ib  选中括号中的内容，不含括号

iB  选中{}中的内容，不含{}
</code></pre>

<p>对标记进行动作</p>

<pre><code>&gt;   块右移

&lt;   块左移

y   复制块

d   删除块

~   切换块中内容的大小写
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Vm]]></title>
    <link href="http://kaku87.github.com/blog/2013/03/04/about-vm/"/>
    <updated>2013-03-04T17:21:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2013/03/04/about-vm</id>
    <content type="html"><![CDATA[<h2>VM设定时遇到的网络问题</h2>

<hr />

<ol>
<li><p>虚拟机不能上网  桥接方式</p>

<pre><code>   桥接方式解决。注意设置windows下的网络链接，要将桥接的checkbox选上
</code></pre></li>
<li><p>window下的putty不能连接到虚拟机上，网址也不能访问</p>

<pre><code>  网址不能访问是linux下的防火墙没有关闭

  service iptables stop 注意要用root权限关闭，不然不起作用

  putty连不上的原因，是因为没有安装openssh

  yum -y install openssh-client openssh-server

  安装完毕后发现还是不能连接，原因是ssh服务还需要手动启动

  service sshd start
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Centos下搭rails开发环境时的一些记录]]></title>
    <link href="http://kaku87.github.com/blog/2013/03/04/new-post/"/>
    <updated>2013-03-04T16:42:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2013/03/04/new-post</id>
    <content type="html"><![CDATA[<p>安装mysql</p>

<pre><code>yum -y install mysql
</code></pre>

<p>配置文件-设置编码为utf8</p>

<pre><code>vim /etc/my.cnf

[mysql]
default-character-set = utf8
</code></pre>

<p>启动mysql服务</p>

<pre><code>/etc/rc.d/init.d/msyqld start
</code></pre>

<p>设置mysql随机启动</p>

<pre><code>chkconfig mysqld on 
chkconfig --liset mysqld
</code></pre>

<p>创建数据库</p>

<pre><code>msyqladmin -u root create depot_development
</code></pre>

<p>修改root用户的密码</p>

<pre><code>update user set password = password('root') where user = 'root'

/etc/init.d/mysqld restart

mysql -uroot -p
</code></pre>

<p>创建rails项目</p>

<pre><code>rails new depot --database=mysql
</code></pre>

<p>出现错误</p>

<pre><code>mysql.h is missing.
</code></pre>

<p>解决办法:</p>

<pre><code>yum -y install mysql-devel
</code></pre>

<p>mysql 查看表结构</p>

<pre><code>desc 表名
</code></pre>
]]></content>
  </entry>
  
</feed>
