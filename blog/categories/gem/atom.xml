<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | kaku's Blog]]></title>
  <link href="http://kaku87.github.com/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://kaku87.github.com/"/>
  <updated>2015-02-06T23:45:45+09:00</updated>
  <id>http://kaku87.github.com/</id>
  <author>
    <name><![CDATA[kaku]]></name>
    <email><![CDATA[ghjcumt2008@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Gem系列之ffaker]]></title>
    <link href="http://kaku87.github.com/blog/2015/02/06/ffaker/"/>
    <updated>2015-02-06T23:17:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2015/02/06/ffaker</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>ffaker可以用来生成测试数据，在rails的seed.rb文件中写少量的代码然后执行
rake db:seed 就可以生成大量的测试数据。</p>

<p>fmaker的github地址:
<a href="https://github.com/emmanueloga/ffaker">https://github.com/emmanueloga/ffaker</a></p>

<h2>和faker的关系</h2>

<ol>
<li>ffaker是faker的重写版。</li>
<li>ffaker要比faker执行快。</li>
</ol>


<h2>和faker的速度比较</h2>

<p><code>ruby
def bench1000
  start = Time.now  
  1000.times{yield}
  finish = Time.now  
  puts "Time: #{(finish - start).to_f}"  
end
</code></p>

<p>faker的执行时间
```ruby
require 'faker'
bench1000{Faker::Name.name}</p>

<h1>=> Time: 0.186539</h1>

<p>```</p>

<p>ffaker的执行时间
```ruby
require 'ffaker'
bench1000{Faker::Name.name}</p>

<h1>=> Time: 0.009986</h1>

<p>```</p>

<p>快了不止一点点啊。。。。</p>

<h2>使用方法</h2>

<p>安装</p>

<p><code>sh
gem install ffaker
</code></p>

<p>在seed.rb中添加类似这样的生成代码，然后执行rake db:seed就可以生成测试数据了。</p>

<p>```ruby
10.times do</p>

<pre><code>User.create(name: Faker::Name.name, profile: Faker::Lorem.sentence(10))
</code></pre>

<p>end
```</p>

<h2>常用API</h2>

<p>```ruby
Faker::Name.name      #=> "Christophe Bartell"</p>

<p>Faker::Internet.email #=> "kirsten.greenholt@corkeryfisher.info"</p>

<p>Faker::PhoneNumber.cell_phone #=> "(186)285-7925"</p>

<p>Faker::Lorem.sentence #=> "Dolore illum animi et neque accusantium."</p>

<p>Faker::Lorem.paragraph #=> "Neque dicta enim quasi. Qui corrupti est quisquam. Facere animi quod aut. Qui nulla consequuntur consectetur sapiente."</p>

<p>Faker::Number.number(10) #=> "1968353479"</p>

<p>Faker::Internet.password(8) #=> "yfgjik0hgzdqs0"</p>

<p>Faker::Business.credit_card_number #=> "1228-1221-1221-1431"</p>

<p>```</p>

<p>其他详细用法请详见这里 <a href="http://www.rubydoc.info/gems/faker/1.4.3">http://www.rubydoc.info/gems/faker/1.4.3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Gem系列之settingslogic]]></title>
    <link href="http://kaku87.github.com/blog/2015/02/04/settingslogic/"/>
    <updated>2015-02-04T21:37:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2015/02/04/settingslogic</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>可以从配置文件简单读取配置的gem</p>

<p>github地址：https://github.com/binarylogic/settingslogic</p>

<p>安装</p>

<p><code>ruby
gem install settingslogic
</code></p>

<p>定义class   app/models/settings.rb</p>

<p><code>ruby
class Settings &lt; Settingslogic
  source "#{Rails.root}/config/application.yml"
  namespace Rails.env
end
</code></p>

<p>创建配置文件  config/application.yml</p>

<p>```ruby
defaults: &amp;defaults
  cool:</p>

<pre><code>saweet: nested settings
</code></pre>

<p>  neat_setting: 24
  awesome_setting: &lt;%= "Did you know 5 + 5 = #{5 + 5}?" %></p>

<p>development:
  &lt;&lt;: *defaults
  neat_setting: 800</p>

<p>test:
  &lt;&lt;: *defaults</p>

<p>production:
  &lt;&lt;: *defaults
```</p>

<p>之后在rails console里面测试一下，就可以拿到配置文件里的值了</p>

<p>```ruby</p>

<blockquote><blockquote><p>Rails.env
=> "development"</p>

<p>Settings.cool
=> "#&lt;Settingslogic::Settings ... >"</p>

<p>Settings.cool.saweet
=> "nested settings"</p>

<p>Settings.neat_setting
=> 800</p>

<p>Settings.awesome_setting
=> "Did you know 5 + 5 = 10?"
```</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Gem系列之devise]]></title>
    <link href="http://kaku87.github.com/blog/2015/01/26/devise/"/>
    <updated>2015-01-26T22:48:00+09:00</updated>
    <id>http://kaku87.github.com/blog/2015/01/26/devise</id>
    <content type="html"><![CDATA[<h1>Devise</h1>

<h2>概要</h2>

<p>最有人气的登陆验证gem。ORM支持ActiveRecord和Mongodb。</p>

<h2>基本使用方法</h2>

<p>创建project</p>

<p>```
rails new blog
cd blog</p>

<p>```</p>

<p>Gemfile中加入devise gem</p>

<p>```</p>

<h1>Gemfile</h1>

<p>gem 'devise'</p>

<p>```</p>

<p>运行bundle install</p>

<p>```
bundle install</p>

<p>```</p>

<p>安装devise</p>

<p><code>
rails g devise:install
</code></p>

<p>指定发送邮件时的host名</p>

<p>```</p>

<h1>config/environments/development.rb</h1>

<p>Rails.application.configure do
  ...
  # deviseの設定
  config.action_mailer.default_url_options = { host: 'localhost:3000' }
end
```</p>

<p>指定root_url</p>

<p>```</p>

<h1>config/routes.rb</h1>

<p>  root to: "home#index"
  ... <br/>
```</p>

<p>加入错误消息显示部分代码</p>

<p>```</p>

<h1>app/views/layouts/application.html.erb</h1>

<p><body></p>

<p class="notice"><%= notice %></p>
<p class="alert"><%= alert %></p>

<%= yield %>

</body>
</html>

```

生成devise model

```
rails g devise user
```

执行migrate

```
rake db:migrate
```

添加登陆，退出，注册，设置链接

```
# app/views/layouts/application.html.erb
...
<body>
<header>
  <nav>
    <!-- user_signed_in? devise的Helper方法，验证是否已登陆 -->
    <% if user_signed_in? %> 
      <!-- current_user 当前登陆User对象 -->
      <!-- *_path devise自动生成的路由，执行rake routes可以确认 -->
      Logged in as <strong><%= current_user.email %></strong>.
      <%= link_to '设置', edit_user_registration_path %> |
      <%= link_to "退出", destroy_user_session_path, method: :delete %>
    <% else %>
      <%= link_to "注册", new_user_registration_path %> |
      <%= link_to "登陆", new_user_session_path %>
    <% end %>
  </nav>
</header>

<p class="notice"><%= notice %></p>
<p class="alert"><%= alert %></p>

<%= yield %>

</body>
</html>
```

启动服务，就可以看到画面啦。

```
rails s
```

]]></content>
  </entry>
  
</feed>
